{"version":3,"sources":["Components/Navbar.js","Components/TextFile.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","str","className","mode","href","title","type","id","about","onClick","togglemode","htmlFor","charAt","toUpperCase","substring","TextFile","useState","text","settext","preview","setpreview","style","rows","onChange","obj","target","value","trim","showAlert","toLowerCase","length","endsWith","split","toPrecision","Alert","alert","role","msg","defaultProps","App","setmode","backgroundColor","setstyle","setalert","message","setTimeout","document","body","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.aee8b7b9.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n  const capitalize = (str) => {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n  }\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`} >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/\">{props.about}</a>\r\n            </li>\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode === \"dark\" ? \"light\" : \"dark\"}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.togglemode} />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{capitalize(props.mode)} Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string.isRequired,\r\n};\r\nNavbar.defaultProps = {\r\n  title: \"Title\",\r\n  about: \"About\",\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nexport default function TextFile(props) {\r\n  const [text, settext] = useState(\"\");\r\n  const [preview, setpreview] = useState(\"Enter text to preview\")\r\n  function textset(obj) {\r\n    settext(obj.target.value);\r\n    setpreview(obj.target.value.trim());\r\n  }\r\n  function toUpper() {\r\n    settext(text.toUpperCase());\r\n    setpreview(text.toUpperCase());\r\n    props.showAlert(\"Text converted to uppercase\",\"Success: \");\r\n  }\r\n  function toLower() {\r\n    settext(text.toLowerCase());\r\n    setpreview(text.toLowerCase());\r\n    props.showAlert(\"Text converted to Lowercase\",\"Success: \");\r\n  }\r\n  function clear() {\r\n    settext(\"\");\r\n    setpreview(\"Enter text to preview\");\r\n    props.showAlert(\"Text cleared\",\"Success: \");\r\n  }\r\n  return props.style && (\r\n    <div className=\"container\" style={props.style}>\r\n      <div className=\"mb-3 ml-3 mr-3\">\r\n        <h1>Enter your text here</h1>\r\n        <textarea className=\"form-control\" id=\"mytext\" rows=\"3\" onChange={textset} value={text}></textarea>\r\n        <button className=\"btn btn-primary my-3\" onClick={toUpper}>Convert to Uppercase</button>\r\n        <button className=\"btn btn-primary my-3 mx-3\" onClick={toLower}>Convert to Lowercase</button>\r\n        <button className=\"btn btn-primary my-3 mx-3\" onClick={clear}>Clear</button>\r\n        <p>{text.length} characters ,{text === \"\" ? 0 : (text.endsWith(\" \") ? text.split(\" \").length - 1 : text.split(\" \").length)} words and {((text === \"\" ? 0 : (text.endsWith(\" \") ? text.split(\" \").length - 1 : text.split(\" \").length)) * 0.3).toPrecision(3)}min read</p>\r\n        <h3>Preview</h3>\r\n        <p>{preview}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n       props.alert&& <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n        <strong>{props.alert.type}</strong>{props.alert.msg}\r\n      </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './Components/Navbar';\n// import About from './Components/About';\nimport TextFile from './Components/TextFile';\nimport Alert from './Components/Alert';\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const [style, setstyle] = useState({ backgroundColor: \"white\" });\n  const [alert, setalert] = useState(null);\n  const showAlert=(message,type)=>{\n    setalert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 1000);\n  }\n  const togglemode = () => {\n    if (mode === \"dark\") {\n      setmode(\"light\");\n      setstyle({\n        backgroundColor: \"white\"\n      })\n      document.body.style.backgroundColor = \"white\"\n      showAlert(\"Light mode has been enabled\",\"Success: \");\n    }\n    else {\n      setmode(\"dark\");\n      setstyle({\n        color: \"white\"\n      });\n      document.body.style.backgroundColor = \"#243c51\";\n      showAlert(\"Dark mode has been enabled\",\"Success: \");\n    }\n  };\n  return (\n    <>\n      <Navbar title=\"TextUtils\" about=\"about this site\" mode={mode} togglemode={togglemode} />\n      <Alert alert={alert}/>\n      <TextFile style={style} showAlert={showAlert} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}